import traceback
from repository.tenable_security_center import TenableSC, SCParams
from repository.asset_database import AssetDatabase
import pandas as pd

class vulndata:
    def __init__(self, dataframe=None, status=None, error=None):
        self.dataframe = dataframe
        self.status = status
        self.error = error

class http_response:
    def __init__(self, dataframe=None, status=None, error=None):
        self.dataframe = dataframe
        self.status = status
        self.error = error
class VulnMgmt:

    def __init__(self, params=SCParams(filter=[
        {
            "id": "repository",
            "filterName": "repository",
            "operator": "=",
            "type": "vuln",
            "isPredefined": True,
            "value": [
                {
                    "id": "2"
                }
            ]
        },
        {
            "id": "severity",
            "filterName": "severity",
            "operator": "=",
            "type": "vuln",
            "isPredefined": True,
            "value": "4"
        }
    ],
        endoffset=99999
    ), asset_database=AssetDatabase()):
        self.params = params
        self.tenable_sc_session = TenableSC()
        self.asset_database = asset_database
        pass
    def create_web_app_scan(self, name, policy_id, zone, target_url, scan_desc ):
        try:
            response = self.tenable_sc_session.create_web_app_scan(name, policy_id, zone, target_url, scan_desc)
            return http_response(dataframe=response.data, status=response.status, error=None)
        except Exception as err:
            return http_response(dataframe=None, status=None, error=str(traceback.format_exc()))

    def get_was_policies(self):
        try:
            response = self.tenable_sc_session.get_was_policies()
            return http_response(dataframe=response.data, status=response.status, error=response.url)
        except Exception as err:
            return http_response(dataframe=None, status=None, error=str(traceback.format_exc()))
    def create_oracle_credential_profile(self, values):
        try:
            response = self.tenable_sc_session.create_oracle_credential_profile(values["name"], values["desc"], values["port"], values["password"], values["user"], values["sid"])
            return http_response(dataframe=response.data, status=response.status, error=response.url)
        except Exception as err:
            return http_response(dataframe=None, status=None, error=str(traceback.format_exc()))
    def get_vulnerabilities(self):
        try:
            vuln_summary_dataset = self.tenable_sc_session.vuln_summary(params=self.params)
            if vuln_summary_dataset.status == 200:
                vuln_summary = vuln_summary_dataset.data["response"]["results"]
                findings = []
                for vuln in vuln_summary:
                    filter = [self.tenable_sc_session.base_filter[0], {
                        "id": "pluginID",
                        "filterName": "pluginID",
                        "operator": "=",
                        "type": "vuln",
                        "isPredefined": True,
                        "value": str(vuln['pluginID'])
                    }]
                    vuln_list = self.tenable_sc_session.vuln_list(filter)
                    if vuln_list.status == 200:
                        for vuln_list_record in vuln_list.data["response"]["results"]:
                            vuln_details_dataset = self.tenable_sc_session.vuln_details(vuln_list_record)
                            vuln_details = vuln_details_dataset.data["response"]["results"][0]
                            dataset = {}
                            dataset['severity'] = vuln['severity']['name']
                            dataset['pluginID'] = vuln['pluginID']
                            dataset['name'] = vuln['name']
                            dataset['ip'] = vuln_list_record['ip']
                            dataset['port'] = vuln_list_record['port']
                            dataset['protocol'] = vuln_list_record['protocol']
                            dataset['dnsName'] = vuln_list_record['dnsName']
                            dataset['netbiosName'] = vuln_list_record['netbiosName']
                            dataset['synopsis'] = vuln_details["synopsis"]
                            dataset['baseScore'] = vuln_details["baseScore"]
                            dataset['description'] = vuln_details["description"]
                            dataset['solution'] = vuln_details["solution"]
                            # dataset['baseCVSSScore']=vuln['baseCVSSScore']
                            dataset['assignee'] = self.asset_database.get_owner(vuln_list_record['ip'])
                            findings.append(dataset)
                http_status_info = {}
                http_status_info["vuln_summary"] = vuln_summary_dataset.status
                http_status_info["vuln_list"] = vuln_list.status
                df = pd.DataFrame(findings)
                return vulndata(dataframe=df, status=http_status_info, error=None)
        except Exception as err:
            return vulndata(dataframe=None, status=None, error=str(traceback.format_exc()))








